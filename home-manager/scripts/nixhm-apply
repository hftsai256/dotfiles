#!/usr/bin/env bash
set -e

ROOT=$HOME/.config/home-manager
USER_FILE=$ROOT/ACTIVATED_USER

update() {
        pushd "$ROOT" > /dev/null
        nix run github:berberman/nvfetcher
        nix flake update
        popd > /dev/null
}

apply() {
        pushd "$ROOT" > /dev/null
        nix build .#homeManagerConfigurations."$1".activationPackage \
                --show-trace \
                --impure \
                --extra-experimental-features flakes \
                --extra-experimental-features nix-command \
        && ./result/activate
        popd > /dev/null
}

user_menu() {
        options=($(awk '/(.*)[[:space:]]*=[[:space:]]*homeManagerConfiguration/ {print $1}' "$ROOT/flake.nix"))
        PS3="Select user profile: "
        select opt in "${options[@]}" "quit"; do
                case $opt in
                "quit")
                        break
                        ;;
                *)
                        echo "${opt%.nix}"
                        break
                        ;;
                esac
        done
}

get_user() {
        if [ -f "$USER_FILE" ]; then 
                cat "$USER_FILE"
        else
                user_menu | tee "$USER_FILE"
        fi
}

install_nix() {
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install 
}

usage() {
        echo
        cat<<EOF
$(basename "$0") [-u] [-r] [-s] -- Helper script for updating packages and profiles managed by nix, flakes and home-manager

Options:
        -u  update flakes
        -r  reset user profile
        -s  apply new settings

Example:
        $(basename "$0") -us
EOF
}

has_element () {
        array=("$@")
        target=${array[-1]}
        unset "array[-1]"

        for element in "${array[@]}"; do
                [[ $element == "$target" ]] && return 0
        done
        return 1
}

active_user=$(get_user)
command -v nix >/dev/null 2>&1 || install_nix

declare actions=()
while getopts ":sru" opt; do
        case "$opt" in
                u)
                        actions+=(u)
                        ;;
                r)
                        actions+=(r)
                        ;;
                s)
                        actions+=(s)
                        ;;
                *)
                        echo "unknown option $opt"
                        exit 1
                        ;;
        esac
done

[[ ${#actions[@]} -eq 0 ]] && (
        usage
        exit 1
)

has_element "${actions[@]}" r && {
        echo "→ reset user profile"
        rm "$USER_FILE"
        get_user
}

has_element "${actions[@]}" u && {
        echo "→ update flake"
        update
}

has_element "${actions[@]}" s && {
        echo "→ apply nix environment for user $active_user"
        apply "$active_user"
}
